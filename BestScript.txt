local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Legends Battlegrounds",
    SubTitle = "-- Mobile Made by NozerHub Latest Version!",
    TabWidth = 120,
    Size = UDim2.fromOffset(500, 350),
    Acrylic = true,
    Theme = "Darker",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Tabs = {
    Credits = Window:AddTab({ Title = "| Info", Icon = "scroll" }),
    Settings = Window:AddTab({ Title = "| Settings", Icon = "settings" }),
    Farm = Window:AddTab({ Title = "| Farm", Icon = "swords" }), 
    FarmSettings = Window:AddTab({ Title = "| Farm Settings", Icon = "scale" }),
    Misc = Window:AddTab({ Title = "| Misc", Icon = "book }), 
}

local Options = Fluent.Options

Fluent:Notify({
    Title = "By Nozer Hub",
    Content = "Thanks for using the script",
    Duration = 5
})

local CreditsSection = Tabs.Credits:AddSection("Credits")
local linkParaCopiar = "https://www.youtube.com/@NozerHub"
Tabs.Credits:AddButton({
    Title = "Copy Link Channel",
    Callback = function()
        setclipboard(linkParaCopiar)
    end
})

Tabs.Credits:AddParagraph({
    Title = "Owner: Nozer Hub"
})

Tabs.Credits:AddParagraph({
    Title = "Update 30/11"
})

local AntiAFKEnabled = true
local Toggle = Tabs.Misc:AddToggle("MyToggle", { Title = "Anti AFK", Default = true })

Toggle:OnChanged(function()
    AntiAFKEnabled = Options.MyToggle.Value
end)

Options.MyToggle:SetValue(true)

local VirtualUser = game:GetService("VirtualUser")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
LocalPlayer.Idled:Connect(function()
    if AntiAFKEnabled then
        VirtualUser:Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
        task.wait(1)
        VirtualUser:Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
    end
end)

local PlayerSettingsSection = Tabs.Farm:AddSection("Player Settings")

local AutoAttackToggle = Tabs.Farm:AddToggle("AutoAttackToggle", { Title = "Auto Attack", Default = false })

AutoAttackToggle:OnChanged(function()
    if AutoAttackToggle.Value then
        -- Executa o M1Down
        local argsDown = {
            [1] = {
                ["Request"] = "M1Down"
            }
        }
        game:GetService("Players").LocalPlayer.Character.Network:FireServer(unpack(argsDown))
        task.wait(0.1)  -- Espera 0.1 segundo antes de executar o M1Up
    else
        -- Executa o M1Up
        local argsUp = {
            [1] = {
                ["Request"] = "M1Up"
            }
        }
        game:GetService("Players").LocalPlayer.Character.Network:FireServer(unpack(argsUp))
    end
end)

Tabs.Misc:AddButton({
    Title = "Server Hop",
    Callback = function()
        local TeleportService = game:GetService("TeleportService")
        local HttpService = game:GetService("HttpService")
        local placeId = game.PlaceId

        local function serverHop()
            local servers
            local cursor = ""

            local success, response = pcall(function()
                local url = "https://games.roblox.com/v1/games/" .. placeId .. "/servers/Public?sortOrder=Asc&limit=100&cursor=" .. cursor
                return HttpService:JSONDecode(game:HttpGet(url))
            end)

            if success and response and response.data then
                servers = response.data
            else
                return
            end

            for _, server in ipairs(servers) do
                if server.id ~= game.JobId and server.playing < server.maxPlayers then
                    TeleportService:TeleportToPlaceInstance(placeId, server.id)
                    return
                end
            end

            if response.nextPageCursor then
                cursor = response.nextPageCursor
                serverHop()
            else
            end
        end

        serverHop()
    end
})

Tabs.Misc:AddButton({
    Title = "Rejoin",
    Callback = function()
        local TeleportService = game:GetService("TeleportService")
        local player = game.Players.LocalPlayer
        TeleportService:Teleport(game.PlaceId, player)
    end
})

-- Configurações de Interface e Salvar Configurações
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")
InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)

Window:SelectTab(1)
Fluent:Notify({
    Title = "Fluent",
    Content = "The script has been loaded.",
    Duration = 5
})

SaveManager:LoadAutoloadConfig()

local AutoDashAttackToggle = Tabs.Farm:AddToggle("AutoDashAttackToggle", { Title = "Auto Dash Attack", Default = false })

AutoDashAttackToggle:OnChanged(function()
    if AutoDashAttackToggle.Value then
        task.spawn(function()
            while AutoDashAttackToggle.Value do
                local args = {
                    [1] = {
                        ["Bool"] = false,
                        ["Request"] = "FrontDash"
                    }
                }
                game:GetService("Players").LocalPlayer.Character.Network:FireServer(unpack(args))
                task.wait(0.1)
            end
        end)
    end
end)

local AutoSkillToggle = Tabs.Farm:AddToggle("AutoSkillToggle", { Title = "Auto Use Skills", Default = false })

AutoSkillToggle:OnChanged(function()
    if AutoSkillToggle.Value then
        task.spawn(function()
            while AutoSkillToggle.Value do
                for i = 1, 4 do
                    local args = {
                        [1] = {
                            ["Number"] = tostring(i),
                            ["Request"] = "Skill"
                        }
                    }
                    game:GetService("Players").LocalPlayer.Character.Network:FireServer(unpack(args))
                    task.wait(0.1)
                end
            end
        end)
    end
end)

local Toggle = Tabs.Farm:AddToggle("AutoAwakenToggle", {
    Title = "Auto Awaken",
    Default = false
})

Toggle:OnChanged(function()
    if Toggle.Value then
        while Toggle.Value do
            local args = {
                [1] = {
                    ["Request"] = "Awaken"
                }
            }

            game:GetService("Players").LocalPlayer.Character.Network:FireServer(unpack(args))

            wait(0.1)  -- Intervalo de 0.1 segundo entre as execuções
        end
    end
end)

local Toggle = Tabs.Farm:AddToggle("AutoFarmPlayerToggle", { 
    Title = "Kill Farm", 
    Default = false 
})

local AutoFarmEnabled = false
local currentTarget = nil

local function TeleportToPlayerBack(targetPlayer)
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()

    if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
        local targetCharacter = targetPlayer.Character
        local targetPosition = targetCharacter.HumanoidRootPart.Position
        local targetLookVector = targetCharacter.HumanoidRootPart.CFrame.LookVector

        if character then
            local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
            if humanoidRootPart then
                -- Ajustando a posição para ficar mais próximo do alvo e tocando o chão
                local behindPosition = targetPosition - (targetLookVector * 2.5)  -- Ajuste a distância para 2.5
                humanoidRootPart.CFrame = CFrame.new(behindPosition, targetPosition)  -- Mantém o personagem virado para as costas do alvo
            end
        end
    end
end

local function FindClosestPlayer()
    local closestPlayer = nil
    local closestDistance = math.huge

    for _, targetPlayer in pairs(game.Players:GetPlayers()) do
        if targetPlayer ~= game.Players.LocalPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("Humanoid") and targetPlayer.Character.Humanoid.Health > 0 then
            local playerPosition = targetPlayer.Character.HumanoidRootPart.Position
            local localPlayerPosition = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
            local distance = (playerPosition - localPlayerPosition).Magnitude

            if distance < closestDistance then
                closestDistance = distance
                closestPlayer = targetPlayer
            end
        end
    end

    return closestPlayer
end

local function StartAutoFarm()
    while AutoFarmEnabled do
        if currentTarget == nil or not currentTarget.Character or not game.Players:FindFirstChild(currentTarget.Name) or currentTarget.Character.Humanoid.Health <= 0 then
            currentTarget = FindClosestPlayer()
            if currentTarget then
                TeleportToPlayerBack(currentTarget)
            end
        end

        if currentTarget and currentTarget.Character and currentTarget.Character:FindFirstChild("HumanoidRootPart") then
            TeleportToPlayerBack(currentTarget)
        end

        wait(0.1)
    end
end

Toggle:OnChanged(function()
    AutoFarmEnabled = Toggle.Value

    if AutoFarmEnabled then
        currentTarget = FindClosestPlayer()
        if currentTarget then
            TeleportToPlayerBack(currentTarget)
        end
        StartAutoFarm()
    else
        currentTarget = nil
    end
end)

Toggle:SetValue(false)

local Dropdown = Tabs.FarmSettings:AddDropdown("PlayerDropdown", {
    Title = "Select A Player",
    Default = "SELECT A PLAYER!", -- Inicialmente sem valor
    Values = {}   -- Preenchido dinamicamente
})

local Toggle = Tabs.FarmSettings:AddToggle("AutoFarmPlayerToggle", { 
    Title = "Farm Player", 
    Default = false,
    Description = "Farm On Selected Player From Dropdown."
})

local AutoFarmEnabled = false
local currentTarget = nil

local function TeleportToPlayerBack(targetPlayer)
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()

    if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
        local targetCharacter = targetPlayer.Character
        local targetPosition = targetCharacter.HumanoidRootPart.Position
        local targetLookVector = targetCharacter.HumanoidRootPart.CFrame.LookVector

        if character then
            local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
            if humanoidRootPart then
                -- Ajustando a posição para ficar atrás do alvo e tocando o chão
                local behindPosition = targetPosition - (targetLookVector * 2.5)  -- Distância ajustada para 2.5
                -- Ajuste para que o personagem encoste no chão
                local height = humanoidRootPart.Position.Y
                local adjustedPosition = Vector3.new(behindPosition.X, height, behindPosition.Z)
                humanoidRootPart.CFrame = CFrame.new(adjustedPosition, targetPosition)  -- Mantém o personagem virado para as costas do alvo
            end
        end
    end
end

local function FindClosestPlayer()
    local closestPlayer = nil
    local closestDistance = math.huge

    for _, targetPlayer in pairs(game.Players:GetPlayers()) do
        if targetPlayer ~= game.Players.LocalPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("Humanoid") and targetPlayer.Character.Humanoid.Health > 0 then
            local playerPosition = targetPlayer.Character.HumanoidRootPart.Position
            local localPlayerPosition = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
            local distance = (playerPosition - localPlayerPosition).Magnitude

            if distance < closestDistance then
                closestDistance = distance
                closestPlayer = targetPlayer
            end
        end
    end

    return closestPlayer
end

local function StartAutoFarm()
    while AutoFarmEnabled do
        if currentTarget == nil or not currentTarget.Character or not game.Players:FindFirstChild(currentTarget.Name) or currentTarget.Character.Humanoid.Health <= 0 then
            currentTarget = FindClosestPlayer()
            if currentTarget then
                TeleportToPlayerBack(currentTarget)
            end
        end

        if currentTarget and currentTarget.Character and currentTarget.Character:FindFirstChild("HumanoidRootPart") then
            TeleportToPlayerBack(currentTarget)
        end

        wait(0.1)
    end
end

local function updatePlayerList()
    local playerNames = {}
    for _, player in pairs(game.Players:GetPlayers()) do
        if player.Name ~= game.Players.LocalPlayer.Name then
            table.insert(playerNames, player.Name)
        end
    end

    if #playerNames > 0 then
        -- Define o nome do primeiro jogador como valor padrão
        Dropdown:SetValue(playerNames[1])
    end

    if Dropdown then
        Dropdown:SetValues(playerNames)
    end
end

-- Adicionando o botão de "Refresh Players"
Tabs.FarmSettings:AddButton({
    Title = "Refresh Players",
    Callback = function()
        updatePlayerList() -- Atualiza a lista de jogadores quando o botão for clicado
    end
})

Dropdown:OnChanged(function(Value)
    -- Atualiza o jogador alvo quando o Dropdown mudar
    currentTarget = game.Players:FindFirstChild(Value)
end)

game.Players.PlayerAdded:Connect(updatePlayerList)
game.Players.PlayerRemoving:Connect(updatePlayerList)

updatePlayerList()

Toggle:OnChanged(function()
    AutoFarmEnabled = Toggle.Value

    if AutoFarmEnabled then
        if currentTarget then
            TeleportToPlayerBack(currentTarget)
        end
        StartAutoFarm()
    else
        currentTarget = nil
    end
end)

Toggle:SetValue(false)

local Toggle = Tabs.Farm:AddToggle("TeleportToDummyToggle", { 
    Title = "Attack Dummy", 
    Default = false 
})

local function TeleportToDummyBack()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()

    local dummy = workspace.Characters:FindFirstChild("Dummy")

    if dummy and dummy:FindFirstChild("HumanoidRootPart") then
        local dummyPosition = dummy.HumanoidRootPart.Position
        local dummyLookVector = dummy.HumanoidRootPart.CFrame.LookVector

        if character then
            local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
            local humanoid = character:FindFirstChild("Humanoid")

            if humanoidRootPart and humanoid then
                humanoid.WalkSpeed = 0
                local behindPosition = dummyPosition - (dummyLookVector * 2.5)
                humanoidRootPart.CFrame = CFrame.new(behindPosition, dummyPosition)
            end
        end
    end
end

Toggle:OnChanged(function()
    if Toggle.Value then
        while Toggle.Value do
            TeleportToDummyBack()
            wait(0.01)
        end
    end
end)

Toggle:SetValue(false)

local Toggle = Tabs.Farm:AddToggle("ESPPlayersToggle", {
    Title = "Esp Players",
    Default = false
})

local Players = game:GetService("Players"):GetChildren()
local RunService = game:GetService("RunService")
local highlight = Instance.new("Highlight")
highlight.Name = "Highlight"

-- Definir a cor desejada
local highlightColor = Color3.fromRGB(0, 200, 0)  -- Verde moderado

local function addHighlightToPlayer(player)
    repeat wait() until player.Character
    if player.Character and player.Character:FindFirstChild("HumanoidRootPart") and not player.Character.HumanoidRootPart:FindFirstChild("Highlight") then
        local highlightClone = highlight:Clone()
        highlightClone.Adornee = player.Character
        highlightClone.Parent = player.Character:FindFirstChild("HumanoidRootPart")
        highlightClone.Name = "Highlight"
        highlightClone.FillColor = highlightColor  -- Aplique a cor ao Highlight
        highlightClone.OutlineColor = Color3.fromRGB(255, 255, 255)  -- Cor da borda (branca)
    end
end

local function removeHighlightFromPlayer(player)
    if player.Character and player.Character:FindFirstChild("HumanoidRootPart") and player.Character.HumanoidRootPart:FindFirstChild("Highlight") then
        player.Character.HumanoidRootPart.Highlight:Destroy()
    end
end

-- Função para aplicar ou remover highlights com base no Toggle
local function updatePlayerHighlights()
    for _, player in pairs(game.Players:GetPlayers()) do
        if Toggle.Value then
            addHighlightToPlayer(player)
        else
            removeHighlightFromPlayer(player)
        end
    end
end

-- Adicionar highlight para os jogadores atuais, se o Toggle estiver ativo
updatePlayerHighlights()

-- Monitorar a adição de novos jogadores
game.Players.PlayerAdded:Connect(function(player)
    if Toggle.Value then
        addHighlightToPlayer(player)
    end
end)

-- Monitorar a remoção de jogadores
game.Players.PlayerRemoving:Connect(function(playerRemoved)
    removeHighlightFromPlayer(playerRemoved)
end)

-- Atualizar continuamente a criação de highlights enquanto o Toggle estiver ativado
RunService.Heartbeat:Connect(function()
    updatePlayerHighlights()
end)

-- Controlar o Toggle para ativar/desativar highlights
Toggle:OnChanged(function()
    updatePlayerHighlights()
end)

Toggle:SetValue(false)

local Toggle = Tabs.Farm:AddToggle("AutoBlockToggle", {
    Title = "Auto Block",
    Default = false
})

local AutoBlockEnabled = false

local function AutoBlock()
    local args = {
        [1] = {
            ["Request"] = "FDown"
        }
    }
    
    game:GetService("Players").LocalPlayer.Character.Network:FireServer(unpack(args))
    
    local args2 = {
        [1] = {
            ["Request"] = "FUp"
        }
    }
    
    game:GetService("Players").LocalPlayer.Character.Network:FireServer(unpack(args2))
end

Toggle:OnChanged(function()
    AutoBlockEnabled = Toggle.Value

    if AutoBlockEnabled then
        AutoBlock()
    end
end)

Toggle:SetValue(false)